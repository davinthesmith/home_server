// THIS FILE IS AUTOGENERATED.  DO NOT MODIFY!
// Execute `yarn types` to regenerate this file
// =============================================
/* eslint-disable */
import gql from "graphql-tag";
import * as ReactApolloHooks from "react-apollo-hooks";
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The `Upload` scalar type represents a file upload. */
  Upload: any;
};

export enum CacheControlScope {
  Public = "PUBLIC",
  Private = "PRIVATE"
}

export type HvacValue = {
  __typename?: "HvacValue";
  _id: Scalars["String"];
  source: HvacValueSource;
  temperatureValue: Scalars["Float"];
  humidityValue: Scalars["Float"];
  dateTime: Scalars["Float"];
};

export enum HvacValueColumns {
  Id = "_id",
  Source = "source",
  TemperatureValue = "temperatureValue",
  HumidityValue = "humidityValue",
  DateTime = "dateTime"
}

export type HvacValueInput = {
  source: HvacValueSource;
  temperatureValue: Scalars["Float"];
  humidityValue: Scalars["Float"];
  dateTime: Scalars["Float"];
};

export enum HvacValueSource {
  Thermostat = "THERMOSTAT",
  Kitchen = "KITCHEN",
  Living = "LIVING",
  Dining = "DINING",
  Bedroom1 = "BEDROOM1",
  Bedroom2 = "BEDROOM2",
  Bedroom3 = "BEDROOM3",
  Office = "OFFICE",
  Garage = "GARAGE",
  Master = "MASTER"
}

export type Mutation = {
  __typename?: "Mutation";
  addHvacValue?: Maybe<HvacValue>;
};

export type MutationAddHvacValueArgs = {
  input?: Maybe<HvacValueInput>;
};

export type Query = {
  __typename?: "Query";
  hvacValues?: Maybe<Array<HvacValue>>;
};

export type QueryHvacValuesArgs = {
  source?: Maybe<HvacValueSource>;
  startDate?: Maybe<Scalars["Float"]>;
  endDate?: Maybe<Scalars["Float"]>;
  orderBy?: Maybe<Array<HvacValueColumns>>;
};

export type OverviewQueryVariables = {
  orderBy?: Maybe<Array<HvacValueColumns>>;
};

export type OverviewQuery = { __typename?: "Query" } & {
  hvacValues: Maybe<
    Array<
      { __typename?: "HvacValue" } & Pick<
        HvacValue,
        "_id" | "source" | "temperatureValue" | "humidityValue" | "dateTime"
      >
    >
  >;
};

export const OverviewDocument = gql`
  query overview($orderBy: [HvacValueColumns!]) {
    hvacValues(orderBy: $orderBy) {
      _id
      source
      temperatureValue
      humidityValue
      dateTime
    }
  }
`;

export function useOverviewQuery(
  baseOptions?: ReactApolloHooks.QueryHookOptions<OverviewQueryVariables>
) {
  return ReactApolloHooks.useQuery<OverviewQuery, OverviewQueryVariables>(
    OverviewDocument,
    baseOptions
  );
}
export type OverviewQueryHookResult = ReturnType<typeof useOverviewQuery>;
