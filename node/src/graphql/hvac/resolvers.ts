import { db } from '../../db';
import { Resolvers, HvacValueColumns } from '../../autogenerated-types';

export const HVAC_TABLE = 'hvac_values';
export const HVAC_COLUMNS = Object.keys(HvacValueColumns).map((x: any) => HvacValueColumns[x]);

export const resolvers: Resolvers = {
  Query: {
    hvacValues: async (parent, args) => {
      try {
        const { source, startDate, endDate, first, offset, orderBy } = args;

        const query = db(HVAC_TABLE).select(HVAC_COLUMNS);

        // set optional where clauses
        if (source) query.where('source', source);
        if (startDate) query.where('dateTime', '>=', startDate);
        if (endDate) query.where('dateTime', '<=', endDate);

        // pagination
        if (first) query.limit(first);
        if (offset) query.offset(offset);

        // optional sort direction
        if (orderBy) query.orderBy(orderBy);

        return await query;
      } catch (err) { throw err; }
    }
  },
  Mutation: {
    addHvacValue: async (parent, args) => {
      try {
        const query = db(HVAC_TABLE)
          .insert(args.input)
          .returning(HVAC_COLUMNS);
        const results = await query;
        return results[0];
      } catch (err) { throw err; }
    }
  }
};